{"version":3,"sources":["components/PostsList/PostsList.jsx","api/api.js","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","api/posts.js","components/PostDetails/PostDetails.jsx","App.jsx","api/users.js","index.js"],"names":["PostsList","posts","postId","onSelectPost","onUnselectPost","className","map","id","userId","title","key","type","onClick","getData","url","fetch","then","response","json","result","data","getPostComments","NewCommentForm","setComments","useState","name","email","body","comment","setComment","addFieldToComment","event","target","value","createdComment","addNewComment","method","JSON","stringify","headers","addComment","onSubmit","preventDefault","placeholder","onChange","getAllPosts","PostDetails","post","setPost","comments","hideComments","setHideComments","useEffect","getPostById","length","commentId","App","setPosts","setPostId","users","setUsers","postsAPI","onSelectUser","selectedUserId","selectedPostId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.828ad698.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './PostsList.scss';\n\nexport const PostsList = ({\n  posts,\n  postId,\n  onSelectPost,\n  onUnselectPost,\n}) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts.map(({ id, userId, title }) => (\n        <li className=\"PostsList__item\" key={id}>\n          <div>\n            <b>\n              [User #\n              {userId}\n              ]:\n              {' '}\n            </b>\n            {title}\n          </div>\n\n          {postId === id ? (\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={onUnselectPost}\n            >\n              Closse\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => onSelectPost(id)}\n            >\n              Open\n            </button>\n          )}\n\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape).isRequired,\n  postId: PropTypes.number.isRequired,\n  onSelectPost: PropTypes.func.isRequired,\n  onUnselectPost: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const getData = url => fetch(`${BASE_URL}/${url}`)\n  .then(response => response.json())\n  .then(result => result.data);\n","import { getData } from './api';\n\nconst BASE_URL = 'https://mate-api.herokuapp.com';\nconst url = 'comments';\n\nexport const getPostComments = postId => getData(`${url}?postId=${postId}`);\n\nexport const addComment = ({\n  postId, name, email, body,\n}) => (fetch(`${BASE_URL}/${url}`, {\n  method: 'POST',\n  body: JSON.stringify({\n    postId, name, email, body,\n  }),\n  headers: { 'Content-type': 'application/json; charset=UTF-8' },\n})\n  .then(response => response.json())\n  .then(result => result.data));\n\nexport const deleteComment = commentId => fetch(\n  `${BASE_URL}/${url}/${commentId}`, {\n    method: 'DELETE',\n  },\n)\n  .then(response => response.json())\n  .then(result => result.data);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './NewCommentForm.scss';\n\nimport { getPostComments, addComment } from '../../api/comments';\n\nexport const NewCommentForm = ({ postId, setComments }) => {\n  const [comment, setComment] = useState({\n    postId,\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  const addFieldToComment = (event) => {\n    const { name, value } = event.target;\n\n    setComment(createdComment => ({\n      ...createdComment,\n      [name]: value,\n    }));\n  };\n\n  const clearForm = () => {\n    setComment({\n      postId,\n      name: '',\n      email: '',\n      body: '',\n    });\n  };\n\n  const addNewComment = () => {\n    addComment(comment);\n    getPostComments(postId).then(setComments);\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n        addNewComment();\n        clearForm();\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={comment.name}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={addFieldToComment}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={comment.email}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={addFieldToComment}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={comment.body}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={addFieldToComment}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  setComments: PropTypes.func.isRequired,\n};\n","import { getData } from './api';\n\nconst url = 'posts';\n\nexport const getAllPosts = () => getData(url);\n\nexport const getUserPosts = userId => getData(`${url}?userId=${userId}`);\n\nexport const getPostById = postId => getData(`${url}/${postId}`);\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './PostDetails.scss';\n\nimport { NewCommentForm } from '../NewCommentForm';\n\nimport { getPostById } from '../../api/posts';\nimport { getPostComments, deleteComment } from '../../api/comments';\n\nexport const PostDetails = ({ postId }) => {\n  const [post, setPost] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [hideComments, setHideComments] = useState(false);\n\n  useEffect(() => {\n    getPostById(postId).then(setPost);\n    getPostComments(postId).then(setComments);\n  }, [postId]);\n\n  return (\n    <>\n      {post && (\n        <div className=\"PostDetails\">\n          <h2>Post details:</h2>\n\n          <section className=\"PostDetails__post\">\n            <p>{post.title}</p>\n          </section>\n\n          <section className=\"PostDetails__comments\">\n            {!!comments.length && (\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => (hideComments\n                  ? setHideComments(false)\n                  : setHideComments(true))\n                }\n              >\n                {hideComments\n                  ? `Show ${comments.length} comments`\n                  : `Hide ${comments.length} comments`\n                }\n              </button>\n            )}\n\n            {!hideComments && (\n            <ul className=\"PostDetails__list\">\n              {comments.map(({ id, body }) => (\n                <li className=\"PostDetails__list-item\" key={id}>\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => {\n                      deleteComment(id);\n                      getPostComments(postId).then(setComments);\n                    }}\n                  >\n                    X\n                  </button>\n                  <p>{body}</p>\n                </li>\n              ))}\n            </ul>\n            )}\n          </section>\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm postId={postId} setComments={setComments} />\n            </div>\n          </section>\n        </div>\n      )}\n    </>\n  );\n};\n\nPostDetails.propTypes = {\n  postId: PropTypes.number.isRequired,\n};\n","/* eslint-disable */\nimport React, { useEffect, useState } from 'react';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nimport * as postsAPI from './api/posts';\nimport { getAllUsers } from './api/users';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [postId, setPostId] = useState(0);\n  const [users, setUsers] = useState([]);\n\n  useEffect(() => {\n    postsAPI.getAllPosts().then(setPosts);\n    getAllUsers().then(setUsers);\n  }, []);\n\n  const onSelectUser = (selectedUserId) => {\n    +selectedUserId\n      ? postsAPI.getUserPosts(selectedUserId).then(setPosts)\n      : postsAPI.getAllPosts().then(setPosts);\n\n    onUnselectPost();\n  };\n\n  const onSelectPost = (selectedPostId) => {\n    setPostId(selectedPostId);\n  };\n\n  const onUnselectPost = () => {\n    setPostId(0);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n          <select\n            className=\"App__user-selector\"\n            onChange={(event) => {\n              onSelectUser(event.target.value);\n            }}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(({ id, name }) => (\n              <option value={id} key={id}>{name}</option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            postId={postId}\n            onSelectPost={onSelectPost}\n            onUnselectPost={onUnselectPost}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {/* {!!postId && <PostDetails postId={postId}/>} */}\n          <PostDetails postId={postId} />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { getData } from './api';\n\nconst url = 'users';\n\nexport const getAllUsers = () => getData(url);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}